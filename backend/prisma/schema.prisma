generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  name              String
  avatar            String?
  password          String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  attachments       Attachment[]
  comments          Comment[]
  createdProjects   Project[]
  assignedTasks     Task[]
  workspaceMembers  WorkspaceMember[]
  createdWorkspaces Workspace[]

  @@map("users")
}

model Workspace {
  id          String            @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  createdBy   String
  projects    Project[]
  members     WorkspaceMember[]
  creator     User              @relation(fields: [createdBy], references: [id])

  @@map("workspaces")
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  workspaceId String
  userId      String
  role        Role      @default(MEMBER)
  joinedAt    DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@map("workspace_members")
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  workspaceId String
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  boards      Board[]
  creator     User      @relation(fields: [createdBy], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model Board {
  id        String   @id @default(cuid())
  name      String
  projectId String
  columns   Json     @default("[{\"id\": \"todo\", \"title\": \"To Do\"}, {\"id\": \"in-progress\", \"title\": \"In Progress\"}, {\"id\": \"done\", \"title\": \"Done\"}, {\"id\": \"shelved\", \"title\": \"Shelved\"}]")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]

  @@map("boards")
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  boardId     String
  columnId    String
  assignedTo  String?
  priority    Priority     @default(MEDIUM)
  dueDate     DateTime?
  position    Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attachments Attachment[]
  comments    Comment[]
  assignee    User?        @relation(fields: [assignedTo], references: [id])
  board       Board        @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Attachment {
  id         String   @id @default(cuid())
  filename   String
  url        String
  size       Int
  mimeType   String
  taskId     String
  uploadedBy String
  createdAt  DateTime @default(now())
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploader   User     @relation(fields: [uploadedBy], references: [id])

  @@map("attachments")
}

enum Role {
  ADMIN
  MEMBER
  VIEWER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
